//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

PrivilegeLevel = {
'NORMAL' : 1,
'PREMIUM' : 3,
'MANAGER' : 7,
'SUPPORT' : 8,
'ADMIN' : 9
};
QueryFormat = {
'USER' : 1,
'SEXP' : 2
};
NoteSortOrder = {
'CREATED' : 1,
'UPDATED' : 2,
'RELEVANCE' : 3,
'UPDATE_SEQUENCE_NUMBER' : 4,
'TITLE' : 5
};
PremiumOrderStatus = {
'NONE' : 0,
'PENDING' : 1,
'ACTIVE' : 2,
'FAILED' : 3,
'CANCELLATION_PENDING' : 4,
'CANCELED' : 5
};
Data = function(args) {
  this.bodyHash = null;
  this.size = null;
  this.body = null;
  if (args) {
    if (args.bodyHash !== undefined) {
      this.bodyHash = args.bodyHash;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.body !== undefined) {
      this.body = args.body;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.bodyHash) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1);
    output.writeString(this.bodyHash);
    output.writeFieldEnd();
  }
  if (this.size) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.body) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAttributes = function(args) {
  this.defaultLocationName = null;
  this.defaultLatitude = null;
  this.defaultLongitude = null;
  this.preactivation = null;
  this.viewedPromotions = null;
  this.incomingEmailAddress = null;
  this.recentMailedAddresses = null;
  this.comments = null;
  this.dateAgreedToTermsOfService = null;
  this.maxReferrals = null;
  this.referralCount = null;
  this.refererCode = null;
  this.sentEmailDate = null;
  this.sentEmailCount = null;
  this.dailyEmailLimit = null;
  this.emailOptOutDate = null;
  this.partnerEmailOptInDate = null;
  this.preferredLanguage = null;
  this.preferredCountry = null;
  this.clipFullPage = null;
  this.twitterUserName = null;
  this.twitterId = null;
  this.groupName = null;
  this.recognitionLanguage = null;
  this.customerProfileId = null;
  this.referralProof = null;
  this.educationalDiscount = null;
  this.businessAddress = null;
  this.hideSponsorBilling = null;
  if (args) {
    if (args.defaultLocationName !== undefined) {
      this.defaultLocationName = args.defaultLocationName;
    }
    if (args.defaultLatitude !== undefined) {
      this.defaultLatitude = args.defaultLatitude;
    }
    if (args.defaultLongitude !== undefined) {
      this.defaultLongitude = args.defaultLongitude;
    }
    if (args.preactivation !== undefined) {
      this.preactivation = args.preactivation;
    }
    if (args.viewedPromotions !== undefined) {
      this.viewedPromotions = args.viewedPromotions;
    }
    if (args.incomingEmailAddress !== undefined) {
      this.incomingEmailAddress = args.incomingEmailAddress;
    }
    if (args.recentMailedAddresses !== undefined) {
      this.recentMailedAddresses = args.recentMailedAddresses;
    }
    if (args.comments !== undefined) {
      this.comments = args.comments;
    }
    if (args.dateAgreedToTermsOfService !== undefined) {
      this.dateAgreedToTermsOfService = args.dateAgreedToTermsOfService;
    }
    if (args.maxReferrals !== undefined) {
      this.maxReferrals = args.maxReferrals;
    }
    if (args.referralCount !== undefined) {
      this.referralCount = args.referralCount;
    }
    if (args.refererCode !== undefined) {
      this.refererCode = args.refererCode;
    }
    if (args.sentEmailDate !== undefined) {
      this.sentEmailDate = args.sentEmailDate;
    }
    if (args.sentEmailCount !== undefined) {
      this.sentEmailCount = args.sentEmailCount;
    }
    if (args.dailyEmailLimit !== undefined) {
      this.dailyEmailLimit = args.dailyEmailLimit;
    }
    if (args.emailOptOutDate !== undefined) {
      this.emailOptOutDate = args.emailOptOutDate;
    }
    if (args.partnerEmailOptInDate !== undefined) {
      this.partnerEmailOptInDate = args.partnerEmailOptInDate;
    }
    if (args.preferredLanguage !== undefined) {
      this.preferredLanguage = args.preferredLanguage;
    }
    if (args.preferredCountry !== undefined) {
      this.preferredCountry = args.preferredCountry;
    }
    if (args.clipFullPage !== undefined) {
      this.clipFullPage = args.clipFullPage;
    }
    if (args.twitterUserName !== undefined) {
      this.twitterUserName = args.twitterUserName;
    }
    if (args.twitterId !== undefined) {
      this.twitterId = args.twitterId;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
    if (args.recognitionLanguage !== undefined) {
      this.recognitionLanguage = args.recognitionLanguage;
    }
    if (args.customerProfileId !== undefined) {
      this.customerProfileId = args.customerProfileId;
    }
    if (args.referralProof !== undefined) {
      this.referralProof = args.referralProof;
    }
    if (args.educationalDiscount !== undefined) {
      this.educationalDiscount = args.educationalDiscount;
    }
    if (args.businessAddress !== undefined) {
      this.businessAddress = args.businessAddress;
    }
    if (args.hideSponsorBilling !== undefined) {
      this.hideSponsorBilling = args.hideSponsorBilling;
    }
  }
};
UserAttributes.prototype = {};
UserAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.defaultLocationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLatitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLongitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preactivation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.viewedPromotions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.viewedPromotions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.incomingEmailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.recentMailedAddresses = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.recentMailedAddresses.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dateAgreedToTermsOfService = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.maxReferrals = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.referralCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.refererCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.sentEmailDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.sentEmailCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.dailyEmailLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.emailOptOutDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.partnerEmailOptInDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.preferredLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.preferredCountry = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.clipFullPage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.twitterUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.twitterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.recognitionLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.customerProfileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.referralProof = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.educationalDiscount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.businessAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.hideSponsorBilling = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAttributes.prototype.write = function(output) {
  output.writeStructBegin('UserAttributes');
  if (this.defaultLocationName) {
    output.writeFieldBegin('defaultLocationName', Thrift.Type.STRING, 1);
    output.writeString(this.defaultLocationName);
    output.writeFieldEnd();
  }
  if (this.defaultLatitude) {
    output.writeFieldBegin('defaultLatitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.defaultLatitude);
    output.writeFieldEnd();
  }
  if (this.defaultLongitude) {
    output.writeFieldBegin('defaultLongitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.defaultLongitude);
    output.writeFieldEnd();
  }
  if (this.preactivation) {
    output.writeFieldBegin('preactivation', Thrift.Type.BOOL, 4);
    output.writeBool(this.preactivation);
    output.writeFieldEnd();
  }
  if (this.viewedPromotions) {
    output.writeFieldBegin('viewedPromotions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.viewedPromotions.length);
    for (var iter14 in this.viewedPromotions)
    {
      if (this.viewedPromotions.hasOwnProperty(iter14))
      {
        iter14 = this.viewedPromotions[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.incomingEmailAddress) {
    output.writeFieldBegin('incomingEmailAddress', Thrift.Type.STRING, 6);
    output.writeString(this.incomingEmailAddress);
    output.writeFieldEnd();
  }
  if (this.recentMailedAddresses) {
    output.writeFieldBegin('recentMailedAddresses', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.recentMailedAddresses.length);
    for (var iter15 in this.recentMailedAddresses)
    {
      if (this.recentMailedAddresses.hasOwnProperty(iter15))
      {
        iter15 = this.recentMailedAddresses[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comments) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 9);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  if (this.dateAgreedToTermsOfService) {
    output.writeFieldBegin('dateAgreedToTermsOfService', Thrift.Type.I64, 11);
    output.writeI64(this.dateAgreedToTermsOfService);
    output.writeFieldEnd();
  }
  if (this.maxReferrals) {
    output.writeFieldBegin('maxReferrals', Thrift.Type.I32, 12);
    output.writeI32(this.maxReferrals);
    output.writeFieldEnd();
  }
  if (this.referralCount) {
    output.writeFieldBegin('referralCount', Thrift.Type.I32, 13);
    output.writeI32(this.referralCount);
    output.writeFieldEnd();
  }
  if (this.refererCode) {
    output.writeFieldBegin('refererCode', Thrift.Type.STRING, 14);
    output.writeString(this.refererCode);
    output.writeFieldEnd();
  }
  if (this.sentEmailDate) {
    output.writeFieldBegin('sentEmailDate', Thrift.Type.I64, 15);
    output.writeI64(this.sentEmailDate);
    output.writeFieldEnd();
  }
  if (this.sentEmailCount) {
    output.writeFieldBegin('sentEmailCount', Thrift.Type.I32, 16);
    output.writeI32(this.sentEmailCount);
    output.writeFieldEnd();
  }
  if (this.dailyEmailLimit) {
    output.writeFieldBegin('dailyEmailLimit', Thrift.Type.I32, 17);
    output.writeI32(this.dailyEmailLimit);
    output.writeFieldEnd();
  }
  if (this.emailOptOutDate) {
    output.writeFieldBegin('emailOptOutDate', Thrift.Type.I64, 18);
    output.writeI64(this.emailOptOutDate);
    output.writeFieldEnd();
  }
  if (this.partnerEmailOptInDate) {
    output.writeFieldBegin('partnerEmailOptInDate', Thrift.Type.I64, 19);
    output.writeI64(this.partnerEmailOptInDate);
    output.writeFieldEnd();
  }
  if (this.preferredLanguage) {
    output.writeFieldBegin('preferredLanguage', Thrift.Type.STRING, 20);
    output.writeString(this.preferredLanguage);
    output.writeFieldEnd();
  }
  if (this.preferredCountry) {
    output.writeFieldBegin('preferredCountry', Thrift.Type.STRING, 21);
    output.writeString(this.preferredCountry);
    output.writeFieldEnd();
  }
  if (this.clipFullPage) {
    output.writeFieldBegin('clipFullPage', Thrift.Type.BOOL, 22);
    output.writeBool(this.clipFullPage);
    output.writeFieldEnd();
  }
  if (this.twitterUserName) {
    output.writeFieldBegin('twitterUserName', Thrift.Type.STRING, 23);
    output.writeString(this.twitterUserName);
    output.writeFieldEnd();
  }
  if (this.twitterId) {
    output.writeFieldBegin('twitterId', Thrift.Type.STRING, 24);
    output.writeString(this.twitterId);
    output.writeFieldEnd();
  }
  if (this.groupName) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 25);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.recognitionLanguage) {
    output.writeFieldBegin('recognitionLanguage', Thrift.Type.STRING, 26);
    output.writeString(this.recognitionLanguage);
    output.writeFieldEnd();
  }
  if (this.customerProfileId) {
    output.writeFieldBegin('customerProfileId', Thrift.Type.I64, 27);
    output.writeI64(this.customerProfileId);
    output.writeFieldEnd();
  }
  if (this.referralProof) {
    output.writeFieldBegin('referralProof', Thrift.Type.STRING, 28);
    output.writeString(this.referralProof);
    output.writeFieldEnd();
  }
  if (this.educationalDiscount) {
    output.writeFieldBegin('educationalDiscount', Thrift.Type.BOOL, 29);
    output.writeBool(this.educationalDiscount);
    output.writeFieldEnd();
  }
  if (this.businessAddress) {
    output.writeFieldBegin('businessAddress', Thrift.Type.STRING, 30);
    output.writeString(this.businessAddress);
    output.writeFieldEnd();
  }
  if (this.hideSponsorBilling) {
    output.writeFieldBegin('hideSponsorBilling', Thrift.Type.BOOL, 31);
    output.writeBool(this.hideSponsorBilling);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Accounting = function(args) {
  this.uploadLimit = null;
  this.uploadLimitEnd = null;
  this.uploadLimitNextMonth = null;
  this.premiumServiceStatus = null;
  this.premiumOrderNumber = null;
  this.premiumCommerceService = null;
  this.premiumServiceStart = null;
  this.premiumServiceSKU = null;
  this.lastSuccessfulCharge = null;
  this.lastFailedCharge = null;
  this.lastFailedChargeReason = null;
  this.nextPaymentDue = null;
  this.premiumLockUntil = null;
  this.updated = null;
  this.premiumSubscriptionNumber = null;
  this.lastRequestedCharge = null;
  this.currency = null;
  this.unitPrice = null;
  if (args) {
    if (args.uploadLimit !== undefined) {
      this.uploadLimit = args.uploadLimit;
    }
    if (args.uploadLimitEnd !== undefined) {
      this.uploadLimitEnd = args.uploadLimitEnd;
    }
    if (args.uploadLimitNextMonth !== undefined) {
      this.uploadLimitNextMonth = args.uploadLimitNextMonth;
    }
    if (args.premiumServiceStatus !== undefined) {
      this.premiumServiceStatus = args.premiumServiceStatus;
    }
    if (args.premiumOrderNumber !== undefined) {
      this.premiumOrderNumber = args.premiumOrderNumber;
    }
    if (args.premiumCommerceService !== undefined) {
      this.premiumCommerceService = args.premiumCommerceService;
    }
    if (args.premiumServiceStart !== undefined) {
      this.premiumServiceStart = args.premiumServiceStart;
    }
    if (args.premiumServiceSKU !== undefined) {
      this.premiumServiceSKU = args.premiumServiceSKU;
    }
    if (args.lastSuccessfulCharge !== undefined) {
      this.lastSuccessfulCharge = args.lastSuccessfulCharge;
    }
    if (args.lastFailedCharge !== undefined) {
      this.lastFailedCharge = args.lastFailedCharge;
    }
    if (args.lastFailedChargeReason !== undefined) {
      this.lastFailedChargeReason = args.lastFailedChargeReason;
    }
    if (args.nextPaymentDue !== undefined) {
      this.nextPaymentDue = args.nextPaymentDue;
    }
    if (args.premiumLockUntil !== undefined) {
      this.premiumLockUntil = args.premiumLockUntil;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.premiumSubscriptionNumber !== undefined) {
      this.premiumSubscriptionNumber = args.premiumSubscriptionNumber;
    }
    if (args.lastRequestedCharge !== undefined) {
      this.lastRequestedCharge = args.lastRequestedCharge;
    }
    if (args.currency !== undefined) {
      this.currency = args.currency;
    }
    if (args.unitPrice !== undefined) {
      this.unitPrice = args.unitPrice;
    }
  }
};
Accounting.prototype = {};
Accounting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitNextMonth = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.premiumServiceStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.premiumOrderNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.premiumCommerceService = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.premiumServiceStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.premiumServiceSKU = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.lastSuccessfulCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.lastFailedCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.lastFailedChargeReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.nextPaymentDue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.premiumLockUntil = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.premiumSubscriptionNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.lastRequestedCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.unitPrice = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Accounting.prototype.write = function(output) {
  output.writeStructBegin('Accounting');
  if (this.uploadLimit) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 1);
    output.writeI64(this.uploadLimit);
    output.writeFieldEnd();
  }
  if (this.uploadLimitEnd) {
    output.writeFieldBegin('uploadLimitEnd', Thrift.Type.I64, 2);
    output.writeI64(this.uploadLimitEnd);
    output.writeFieldEnd();
  }
  if (this.uploadLimitNextMonth) {
    output.writeFieldBegin('uploadLimitNextMonth', Thrift.Type.I64, 3);
    output.writeI64(this.uploadLimitNextMonth);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStatus) {
    output.writeFieldBegin('premiumServiceStatus', Thrift.Type.I32, 4);
    output.writeI32(this.premiumServiceStatus);
    output.writeFieldEnd();
  }
  if (this.premiumOrderNumber) {
    output.writeFieldBegin('premiumOrderNumber', Thrift.Type.STRING, 5);
    output.writeString(this.premiumOrderNumber);
    output.writeFieldEnd();
  }
  if (this.premiumCommerceService) {
    output.writeFieldBegin('premiumCommerceService', Thrift.Type.STRING, 6);
    output.writeString(this.premiumCommerceService);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStart) {
    output.writeFieldBegin('premiumServiceStart', Thrift.Type.I64, 7);
    output.writeI64(this.premiumServiceStart);
    output.writeFieldEnd();
  }
  if (this.premiumServiceSKU) {
    output.writeFieldBegin('premiumServiceSKU', Thrift.Type.STRING, 8);
    output.writeString(this.premiumServiceSKU);
    output.writeFieldEnd();
  }
  if (this.lastSuccessfulCharge) {
    output.writeFieldBegin('lastSuccessfulCharge', Thrift.Type.I64, 9);
    output.writeI64(this.lastSuccessfulCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedCharge) {
    output.writeFieldBegin('lastFailedCharge', Thrift.Type.I64, 10);
    output.writeI64(this.lastFailedCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedChargeReason) {
    output.writeFieldBegin('lastFailedChargeReason', Thrift.Type.STRING, 11);
    output.writeString(this.lastFailedChargeReason);
    output.writeFieldEnd();
  }
  if (this.nextPaymentDue) {
    output.writeFieldBegin('nextPaymentDue', Thrift.Type.I64, 12);
    output.writeI64(this.nextPaymentDue);
    output.writeFieldEnd();
  }
  if (this.premiumLockUntil) {
    output.writeFieldBegin('premiumLockUntil', Thrift.Type.I64, 13);
    output.writeI64(this.premiumLockUntil);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 14);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.premiumSubscriptionNumber) {
    output.writeFieldBegin('premiumSubscriptionNumber', Thrift.Type.STRING, 16);
    output.writeString(this.premiumSubscriptionNumber);
    output.writeFieldEnd();
  }
  if (this.lastRequestedCharge) {
    output.writeFieldBegin('lastRequestedCharge', Thrift.Type.I64, 17);
    output.writeI64(this.lastRequestedCharge);
    output.writeFieldEnd();
  }
  if (this.currency) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 18);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.unitPrice) {
    output.writeFieldBegin('unitPrice', Thrift.Type.I32, 19);
    output.writeI32(this.unitPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = function(args) {
  this.id = null;
  this.username = null;
  this.email = null;
  this.name = null;
  this.timezone = null;
  this.privilege = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.shardId = null;
  this.attributes = null;
  this.accounting = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.timezone !== undefined) {
      this.timezone = args.timezone;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.accounting !== undefined) {
      this.accounting = args.accounting;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new UserAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.accounting = new Accounting();
        this.accounting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.timezone) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.privilege) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 7);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 9);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 10);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 13);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 14);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.accounting) {
    output.writeFieldBegin('accounting', Thrift.Type.STRUCT, 16);
    this.accounting.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = function(args) {
  this.guid = null;
  this.name = null;
  this.parentGuid = null;
  this.updateSequenceNum = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.parentGuid !== undefined) {
      this.parentGuid = args.parentGuid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parentGuid) {
    output.writeFieldBegin('parentGuid', Thrift.Type.STRING, 3);
    output.writeString(this.parentGuid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 4);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LazyMap = function(args) {
  this.keysOnly = null;
  this.fullMap = null;
  if (args) {
    if (args.keysOnly !== undefined) {
      this.keysOnly = args.keysOnly;
    }
    if (args.fullMap !== undefined) {
      this.fullMap = args.fullMap;
    }
  }
};
LazyMap.prototype = {};
LazyMap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.keysOnly = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.keysOnly.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.fullMap = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          if (_i28 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key29 = null;
          var val30 = null;
          key29 = input.readString().value;
          val30 = input.readString().value;
          this.fullMap[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LazyMap.prototype.write = function(output) {
  output.writeStructBegin('LazyMap');
  if (this.keysOnly) {
    output.writeFieldBegin('keysOnly', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.keysOnly.length);
    for (var iter31 in this.keysOnly)
    {
      if (this.keysOnly.hasOwnProperty(iter31))
      {
        iter31 = this.keysOnly[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.fullMap) {
    output.writeFieldBegin('fullMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fullMap));
    for (var kiter32 in this.fullMap)
    {
      if (this.fullMap.hasOwnProperty(kiter32))
      {
        var viter33 = this.fullMap[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceAttributes = function(args) {
  this.sourceURL = null;
  this.timestamp = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.cameraMake = null;
  this.cameraModel = null;
  this.clientWillIndex = null;
  this.recoType = null;
  this.fileName = null;
  this.attachment = null;
  this.applicationData = null;
  if (args) {
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.cameraMake !== undefined) {
      this.cameraMake = args.cameraMake;
    }
    if (args.cameraModel !== undefined) {
      this.cameraModel = args.cameraModel;
    }
    if (args.clientWillIndex !== undefined) {
      this.clientWillIndex = args.clientWillIndex;
    }
    if (args.recoType !== undefined) {
      this.recoType = args.recoType;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.attachment !== undefined) {
      this.attachment = args.attachment;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
  }
};
ResourceAttributes.prototype = {};
ResourceAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cameraMake = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cameraModel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.clientWillIndex = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.recoType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.attachment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceAttributes.prototype.write = function(output) {
  output.writeStructBegin('ResourceAttributes');
  if (this.sourceURL) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 1);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.cameraMake) {
    output.writeFieldBegin('cameraMake', Thrift.Type.STRING, 6);
    output.writeString(this.cameraMake);
    output.writeFieldEnd();
  }
  if (this.cameraModel) {
    output.writeFieldBegin('cameraModel', Thrift.Type.STRING, 7);
    output.writeString(this.cameraModel);
    output.writeFieldEnd();
  }
  if (this.clientWillIndex) {
    output.writeFieldBegin('clientWillIndex', Thrift.Type.BOOL, 8);
    output.writeBool(this.clientWillIndex);
    output.writeFieldEnd();
  }
  if (this.recoType) {
    output.writeFieldBegin('recoType', Thrift.Type.STRING, 9);
    output.writeString(this.recoType);
    output.writeFieldEnd();
  }
  if (this.fileName) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 10);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.attachment) {
    output.writeFieldBegin('attachment', Thrift.Type.BOOL, 11);
    output.writeBool(this.attachment);
    output.writeFieldEnd();
  }
  if (this.applicationData) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 12);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = function(args) {
  this.guid = null;
  this.noteGuid = null;
  this.data = null;
  this.mime = null;
  this.width = null;
  this.height = null;
  this.duration = null;
  this.active = null;
  this.recognition = null;
  this.attributes = null;
  this.updateSequenceNum = null;
  this.alternateData = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.mime !== undefined) {
      this.mime = args.mime;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.recognition !== undefined) {
      this.recognition = args.recognition;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.alternateData !== undefined) {
      this.alternateData = args.alternateData;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new Data();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.duration = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.recognition = new Data();
        this.recognition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ResourceAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.alternateData = new Data();
        this.alternateData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.data) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.mime) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 4);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.width) {
    output.writeFieldBegin('width', Thrift.Type.I16, 5);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  if (this.height) {
    output.writeFieldBegin('height', Thrift.Type.I16, 6);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.duration) {
    output.writeFieldBegin('duration', Thrift.Type.I16, 7);
    output.writeI16(this.duration);
    output.writeFieldEnd();
  }
  if (this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 8);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.recognition) {
    output.writeFieldBegin('recognition', Thrift.Type.STRUCT, 9);
    this.recognition.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 11);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 12);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.alternateData) {
    output.writeFieldBegin('alternateData', Thrift.Type.STRUCT, 13);
    this.alternateData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteAttributes = function(args) {
  this.subjectDate = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.author = null;
  this.source = null;
  this.sourceURL = null;
  this.sourceApplication = null;
  this.shareDate = null;
  this.placeName = null;
  this.contentClass = null;
  this.applicationData = null;
  this.lastEditedBy = null;
  if (args) {
    if (args.subjectDate !== undefined) {
      this.subjectDate = args.subjectDate;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.sourceApplication !== undefined) {
      this.sourceApplication = args.sourceApplication;
    }
    if (args.shareDate !== undefined) {
      this.shareDate = args.shareDate;
    }
    if (args.placeName !== undefined) {
      this.placeName = args.placeName;
    }
    if (args.contentClass !== undefined) {
      this.contentClass = args.contentClass;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
    if (args.lastEditedBy !== undefined) {
      this.lastEditedBy = args.lastEditedBy;
    }
  }
};
NoteAttributes.prototype = {};
NoteAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subjectDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.sourceApplication = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.shareDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.placeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.contentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.lastEditedBy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteAttributes.prototype.write = function(output) {
  output.writeStructBegin('NoteAttributes');
  if (this.subjectDate) {
    output.writeFieldBegin('subjectDate', Thrift.Type.I64, 1);
    output.writeI64(this.subjectDate);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.author) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 13);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.source) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 14);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.sourceURL) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 15);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.sourceApplication) {
    output.writeFieldBegin('sourceApplication', Thrift.Type.STRING, 16);
    output.writeString(this.sourceApplication);
    output.writeFieldEnd();
  }
  if (this.shareDate) {
    output.writeFieldBegin('shareDate', Thrift.Type.I64, 17);
    output.writeI64(this.shareDate);
    output.writeFieldEnd();
  }
  if (this.placeName) {
    output.writeFieldBegin('placeName', Thrift.Type.STRING, 21);
    output.writeString(this.placeName);
    output.writeFieldEnd();
  }
  if (this.contentClass) {
    output.writeFieldBegin('contentClass', Thrift.Type.STRING, 22);
    output.writeString(this.contentClass);
    output.writeFieldEnd();
  }
  if (this.applicationData) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 23);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  if (this.lastEditedBy) {
    output.writeFieldBegin('lastEditedBy', Thrift.Type.STRING, 24);
    output.writeString(this.lastEditedBy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Note = function(args) {
  this.guid = null;
  this.title = null;
  this.content = null;
  this.contentHash = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.resources = null;
  this.attributes = null;
  this.tagNames = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.contentHash !== undefined) {
      this.contentHash = args.contentHash;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.tagNames !== undefined) {
      this.tagNames = args.tagNames;
    }
  }
};
Note.prototype = {};
Note.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.tagGuids = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString().value;
          this.tagGuids.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.resources = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new Resource();
          elem47.read(input);
          this.resources.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.tagNames = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.tagNames.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Note.prototype.write = function(output) {
  output.writeStructBegin('Note');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.contentHash) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 4);
    output.writeString(this.contentHash);
    output.writeFieldEnd();
  }
  if (this.contentLength) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 9);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter55 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter55))
      {
        iter55 = this.tagGuids[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter56 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter56))
      {
        iter56 = this.resources[iter56];
        iter56.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.tagNames) {
    output.writeFieldBegin('tagNames', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.tagNames.length);
    for (var iter57 in this.tagNames)
    {
      if (this.tagNames.hasOwnProperty(iter57))
      {
        iter57 = this.tagNames[iter57];
        output.writeString(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Publishing = function(args) {
  this.uri = null;
  this.order = null;
  this.ascending = null;
  this.publicDescription = null;
  if (args) {
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.publicDescription !== undefined) {
      this.publicDescription = args.publicDescription;
    }
  }
};
Publishing.prototype = {};
Publishing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.publicDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Publishing.prototype.write = function(output) {
  output.writeStructBegin('Publishing');
  if (this.uri) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 3);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.publicDescription) {
    output.writeFieldBegin('publicDescription', Thrift.Type.STRING, 4);
    output.writeString(this.publicDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SavedSearch = function(args) {
  this.guid = null;
  this.name = null;
  this.query = null;
  this.format = null;
  this.updateSequenceNum = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
  }
};
SavedSearch.prototype = {};
SavedSearch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SavedSearch.prototype.write = function(output) {
  output.writeStructBegin('SavedSearch');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.format) {
    output.writeFieldBegin('format', Thrift.Type.I32, 4);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Ad = function(args) {
  this.id = null;
  this.width = null;
  this.height = null;
  this.advertiserName = null;
  this.imageUrl = null;
  this.destinationUrl = null;
  this.displaySeconds = null;
  this.score = null;
  this.image = null;
  this.imageMime = null;
  this.html = null;
  this.displayFrequency = null;
  this.openInTrunk = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.advertiserName !== undefined) {
      this.advertiserName = args.advertiserName;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.destinationUrl !== undefined) {
      this.destinationUrl = args.destinationUrl;
    }
    if (args.displaySeconds !== undefined) {
      this.displaySeconds = args.displaySeconds;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.imageMime !== undefined) {
      this.imageMime = args.imageMime;
    }
    if (args.html !== undefined) {
      this.html = args.html;
    }
    if (args.displayFrequency !== undefined) {
      this.displayFrequency = args.displayFrequency;
    }
    if (args.openInTrunk !== undefined) {
      this.openInTrunk = args.openInTrunk;
    }
  }
};
Ad.prototype = {};
Ad.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.advertiserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.destinationUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.displaySeconds = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.imageMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.displayFrequency = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.openInTrunk = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ad.prototype.write = function(output) {
  output.writeStructBegin('Ad');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.width) {
    output.writeFieldBegin('width', Thrift.Type.I16, 2);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  if (this.height) {
    output.writeFieldBegin('height', Thrift.Type.I16, 3);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.advertiserName) {
    output.writeFieldBegin('advertiserName', Thrift.Type.STRING, 4);
    output.writeString(this.advertiserName);
    output.writeFieldEnd();
  }
  if (this.imageUrl) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 5);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.destinationUrl) {
    output.writeFieldBegin('destinationUrl', Thrift.Type.STRING, 6);
    output.writeString(this.destinationUrl);
    output.writeFieldEnd();
  }
  if (this.displaySeconds) {
    output.writeFieldBegin('displaySeconds', Thrift.Type.I16, 7);
    output.writeI16(this.displaySeconds);
    output.writeFieldEnd();
  }
  if (this.score) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.image) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 9);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.imageMime) {
    output.writeFieldBegin('imageMime', Thrift.Type.STRING, 10);
    output.writeString(this.imageMime);
    output.writeFieldEnd();
  }
  if (this.html) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 11);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.displayFrequency) {
    output.writeFieldBegin('displayFrequency', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.displayFrequency);
    output.writeFieldEnd();
  }
  if (this.openInTrunk) {
    output.writeFieldBegin('openInTrunk', Thrift.Type.BOOL, 13);
    output.writeBool(this.openInTrunk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNotebook = function(args) {
  this.id = null;
  this.userId = null;
  this.notebookGuid = null;
  this.email = null;
  this.notebookModifiable = null;
  this.requireLogin = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.shareKey = null;
  this.username = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.notebookModifiable !== undefined) {
      this.notebookModifiable = args.notebookModifiable;
    }
    if (args.requireLogin !== undefined) {
      this.requireLogin = args.requireLogin;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.shareKey !== undefined) {
      this.shareKey = args.shareKey;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
SharedNotebook.prototype = {};
SharedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.notebookModifiable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.requireLogin = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNotebook.prototype.write = function(output) {
  output.writeStructBegin('SharedNotebook');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 3);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.notebookModifiable) {
    output.writeFieldBegin('notebookModifiable', Thrift.Type.BOOL, 5);
    output.writeBool(this.notebookModifiable);
    output.writeFieldEnd();
  }
  if (this.requireLogin) {
    output.writeFieldBegin('requireLogin', Thrift.Type.BOOL, 6);
    output.writeBool(this.requireLogin);
    output.writeFieldEnd();
  }
  if (this.serviceCreated) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 10);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.shareKey) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 8);
    output.writeString(this.shareKey);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 9);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notebook = function(args) {
  this.guid = null;
  this.name = null;
  this.updateSequenceNum = null;
  this.defaultNotebook = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.publishing = null;
  this.published = null;
  this.stack = null;
  this.sharedNotebookIds = null;
  this.sharedNotebooks = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.defaultNotebook !== undefined) {
      this.defaultNotebook = args.defaultNotebook;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.publishing !== undefined) {
      this.publishing = args.publishing;
    }
    if (args.published !== undefined) {
      this.published = args.published;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
    if (args.sharedNotebookIds !== undefined) {
      this.sharedNotebookIds = args.sharedNotebookIds;
    }
    if (args.sharedNotebooks !== undefined) {
      this.sharedNotebooks = args.sharedNotebooks;
    }
  }
};
Notebook.prototype = {};
Notebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.defaultNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.publishing = new Publishing();
        this.publishing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.sharedNotebookIds = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readI64().value;
          this.sharedNotebookIds.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size65 = 0;
        var _rtmp369;
        this.sharedNotebooks = [];
        var _etype68 = 0;
        _rtmp369 = input.readListBegin();
        _etype68 = _rtmp369.etype;
        _size65 = _rtmp369.size;
        for (var _i70 = 0; _i70 < _size65; ++_i70)
        {
          var elem71 = null;
          elem71 = new SharedNotebook();
          elem71.read(input);
          this.sharedNotebooks.push(elem71);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notebook.prototype.write = function(output) {
  output.writeStructBegin('Notebook');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.defaultNotebook) {
    output.writeFieldBegin('defaultNotebook', Thrift.Type.BOOL, 6);
    output.writeBool(this.defaultNotebook);
    output.writeFieldEnd();
  }
  if (this.serviceCreated) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 8);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.publishing) {
    output.writeFieldBegin('publishing', Thrift.Type.STRUCT, 10);
    this.publishing.write(output);
    output.writeFieldEnd();
  }
  if (this.published) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 11);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.stack) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 12);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookIds) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length);
    for (var iter72 in this.sharedNotebookIds)
    {
      if (this.sharedNotebookIds.hasOwnProperty(iter72))
      {
        iter72 = this.sharedNotebookIds[iter72];
        output.writeI64(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharedNotebooks) {
    output.writeFieldBegin('sharedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.sharedNotebooks.length);
    for (var iter73 in this.sharedNotebooks)
    {
      if (this.sharedNotebooks.hasOwnProperty(iter73))
      {
        iter73 = this.sharedNotebooks[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkedNotebook = function(args) {
  this.shareName = null;
  this.username = null;
  this.shardId = null;
  this.shareKey = null;
  this.uri = null;
  this.guid = null;
  this.updateSequenceNum = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  if (args) {
    if (args.shareName !== undefined) {
      this.shareName = args.shareName;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.shareKey !== undefined) {
      this.shareKey = args.shareKey;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
  }
};
LinkedNotebook.prototype = {};
LinkedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shareName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedNotebook.prototype.write = function(output) {
  output.writeStructBegin('LinkedNotebook');
  if (this.shareName) {
    output.writeFieldBegin('shareName', Thrift.Type.STRING, 2);
    output.writeString(this.shareName);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 4);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.shareKey) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 5);
    output.writeString(this.shareKey);
    output.writeFieldEnd();
  }
  if (this.uri) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 6);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 7);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 8);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 9);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 10);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EDAM_NOTE_SOURCE_WEB_CLIP = 'web.clip';
EDAM_NOTE_SOURCE_MAIL_CLIP = 'mail.clip';
EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = 'mail.smtp';
